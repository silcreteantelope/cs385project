// Behavioral model of MIPS - single cycle implementation, R-types and addi

module reg_file (RR1,RR2,WR,WD,RegWrite,RD1,RD2,clock);

  input [2:0] RR1,RR2,WR;
  input [15:0] WD;
  input RegWrite,clock;
  output [15:0] RD1,RD2;

  reg [15:0] Regs[0:3];

  assign RD1 = Regs[RR1];
  assign RD2 = Regs[RR2];

  initial Regs[0] = 0;

  always @(negedge clock)
    if (RegWrite==1 & WR!=0) 
	Regs[WR] <= WD;

endmodule

module alu (ALUctl,A,B,ALUOut,Zero);

  input [2:0] ALUctl;
  input [15:0] A,B;
  output reg [15:0] ALUOut;
  output Zero;

  assign Zero = (ALUOut==0); // Zero is true if ALUOut is 0
  always @(ALUctl, A, B)     // reevaluate if these change
    case (ALUctl)
      3'b000: ALUOut <= A & B;
      3'b001: ALUOut <= A | B;
      3'b010: ALUOut <= A + B;
      3'b110: ALUOut <= A - B;
      3'b111: ALUOut <= A < B ? 1:0;
     default: ALUOut <= 0; //default to 0, should not happen;
   endcase

endmodule

module MainControl (Op,Control); 

  input [3:0] Op;
  output reg [5:0] Control;
// Control bits: RegDst,ALUSrc,RegWrite,ALUOp
  always @(Op) case (Op)
    4'b0101: Control <= 6'b011010; // ADDI
    4'b0010: Control <= 6'b101000; // AND
    4'b0001: Control <= 6'b101110; // SUB
    4'b0011: Control <= 6'b101001; // OR
    4'b0000: Control <= 6'b101010; // ADD
    4'b0100: Control <= 6'b101111; // SLT
  endcase

endmodule



module CPU (clock,PC,ALUOut,IR);

  input clock;
  output [15:0] ALUOut,IR,PC;
  reg[15:0] PC;
  reg[15:0] IMemory[0:1023];
  wire [15:0] IR,NextPC,A,B,ALUOut,RD2,SignExtend;
  wire [2:0] ALUctl;
  wire [1:0] WR; 

// Test Program:
  initial begin 
    IMemory[0] = 16'b 0101_00_01_00001111;  // addi $t1, $0,  15   ($t1=15)
    IMemory[1] = 16'b 0101_00_10_00000111;  // addi $t2, $0,  7    ($t2= 7)
    IMemory[2] = 16'b 0010_01_10_11_000000;  // and  $t3, $t1, $t2  ($t3= 7)
    IMemory[3] = 16'b 0001_01_11_10_000000;  // sub  $t2, $t1, $t3  ($t2= 8)
    IMemory[4] = 16'b 0011_10_11_10_000000;  // or   $t2, $t2, $t3  ($t2=15)
    IMemory[5] = 16'b 0000_10_11_11_000000;  // add  $t3, $t2, $t3  ($t3=22)
    IMemory[6] = 16'b 0100_11_10_01_000000;  // slt  $t1, $t3, $t2  ($t1= 0)
    IMemory[7] = 16'b 0100_10_11_01_000000;  // slt  $t1, $t2, $t3  ($t1= 1)
/*    

These Need to be changed to 16 bit binary like the above with Type instructions, check course blackboard

	IMemory[3] = 32'h012b5022;  // sub  $t2, $t1, $t3  ($t2= 8)
    IMemory[4] = 32'h014b5025;  // or   $t2, $t2, $t3  ($t2=15)
    IMemory[5] = 32'h014b5820;  // add  $t3, $t2, $t3  ($t3=22)
    IMemory[6] = 32'h016a482a;  // slt  $t1, $t3, $t2  ($t1= 0)
    IMemory[7] = 32'h014b482a;  // slt  $t1, $t2, $t3  ($t1= 1)
*/
  end

  initial PC = 0;

  assign IR = IMemory[PC>>1];

  assign WR = (~RegDst) ? IR[9:8]: IR[7:6]; // RegDst Mux

  assign B  = (ALUSrc) ? SignExtend: RD2; // ALUSrc Mux 

  assign SignExtend = {{8{IR[7]}},IR[7:0]}; // sign extension unit

  reg_file rf (IR[11:10],IR[9:8],WR,ALUOut,RegWrite,A,RD2,clock);

  alu fetch (3'b010,PC,16'd2,NextPC,Unused);

  alu ex (ALUctl, A, B, ALUOut, Zero);

  MainControl MainCtr (IR[15:12],{RegDst,ALUSrc,RegWrite,ALUctl}); 


  always @(negedge clock) begin 
    PC <= NextPC;
  end

endmodule


// Test module

module test ();

  reg clock;
  wire [15:0] WD,IR,PC;

  CPU test_cpu(clock,PC,WD,IR);

  always #1 clock = ~clock;
  
  initial begin
    $display ("clock PC    IR                                 WD");
    $monitor ("%b     %2d    %b   %2d", clock,PC,IR,WD);
    clock = 1;
    #14 $finish;
  end

endmodule


/* Compiling and simulation

>iverilog mips-r-type+addi.vl

>vvp a.out

clock PC    IR                                 WD
1      0    00100000000010010000000000001111   15
0      4    00100000000010100000000000000111    7
1      4    00100000000010100000000000000111    7
0      8    00000001001010100101100000100100    7
1      8    00000001001010100101100000100100    7
0     12    00000001001010110101000000100010    8
1     12    00000001001010110101000000100010    8
0     16    00000001010010110101000000100101   15
1     16    00000001010010110101000000100101   15
0     20    00000001010010110101100000100000   22
1     20    00000001010010110101100000100000   22
0     24    00000001011010100100100000101010    0
1     24    00000001011010100100100000101010    0
0     28    00000001010010110100100000101010    1
1     28    00000001010010110100100000101010    1
*/
